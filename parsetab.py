
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D445E826209FB6B9D69FC0A5EAF1DE23'
    
_lr_action_items = {'OP_DIVIDE':([13,15,16,18,19,28,29,32,33,34,35,],[-17,20,-16,20,20,-18,-14,20,-13,20,20,]),'RPAREN':([13,15,16,19,28,29,32,33,34,35,],[-17,21,-16,28,-18,-14,-12,-13,-15,-11,]),'SEMICOLON':([13,16,18,26,28,29,32,33,34,35,],[-17,-16,27,36,-18,-14,-12,-13,-15,-11,]),'OP_MINUS':([13,15,16,18,19,28,29,32,33,34,35,],[-17,22,-16,22,22,-18,-14,-12,-13,22,-11,]),'OP_TIMES':([13,15,16,18,19,28,29,32,33,34,35,],[-17,23,-16,23,23,-18,-14,23,-13,23,23,]),'OP_GT':([13,15,16,18,19,28,29,32,33,34,35,],[-17,24,-16,24,24,-18,-14,-12,-13,None,-11,]),'NUMBER':([10,12,14,17,20,22,23,24,25,],[13,13,13,26,13,13,13,13,13,]),'OP_PLUS':([13,15,16,18,19,28,29,32,33,34,35,],[-17,25,-16,25,25,-18,-14,-12,-13,25,-11,]),'LBRACKET':([21,],[30,]),'OP_EQUAL':([9,11,],[12,17,]),'WHILE':([0,2,4,5,6,8,27,30,31,36,37,38,],[-3,3,-5,-4,-2,-6,-8,-3,-9,-7,3,-10,]),'LPAREN':([3,10,12,14,20,22,23,24,25,],[10,14,14,14,14,14,14,14,14,]),'VAR':([0,2,4,5,6,8,27,30,31,36,37,38,],[-3,7,-5,-4,-2,-6,-8,-3,-9,-7,7,-10,]),'RBRACKET':([4,5,6,8,27,30,31,36,37,38,],[-5,-4,-2,-6,-8,-3,-9,-7,38,-10,]),'ID':([0,2,4,5,6,7,8,10,12,14,20,22,23,24,25,27,30,31,36,37,38,],[-3,9,-5,-4,-2,11,-6,16,16,16,16,16,16,16,16,-8,-3,-9,-7,9,-10,]),'$end':([0,1,2,4,5,6,8,27,31,36,38,],[-3,0,-1,-5,-4,-2,-6,-8,-9,-7,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,30,],[2,37,]),'define_stmt':([2,37,],[4,4,]),'assign_stmt':([2,37,],[8,8,]),'while_stmt':([2,37,],[5,5,]),'program':([0,],[1,]),'statement':([2,37,],[6,6,]),'expression':([10,12,14,20,22,23,24,25,],[15,18,19,29,32,33,34,35,]),'compound_statements':([21,],[31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',6),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',10),
  ('statements -> <empty>','statements',0,'p_empty_statements','parser.py',14),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',18),
  ('statement -> define_stmt','statement',1,'p_statement','parser.py',19),
  ('statement -> assign_stmt','statement',1,'p_statement','parser.py',20),
  ('define_stmt -> VAR ID OP_EQUAL NUMBER SEMICOLON','define_stmt',5,'p_define','parser.py',24),
  ('assign_stmt -> ID OP_EQUAL expression SEMICOLON','assign_stmt',4,'p_assign','parser.py',28),
  ('while_stmt -> WHILE LPAREN expression RPAREN compound_statements','while_stmt',5,'p_while','parser.py',32),
  ('compound_statements -> LBRACKET statements RBRACKET','compound_statements',3,'p_compound_statements','parser.py',36),
  ('expression -> expression OP_PLUS expression','expression',3,'p_expression_bin_op','parser.py',39),
  ('expression -> expression OP_MINUS expression','expression',3,'p_expression_bin_op','parser.py',40),
  ('expression -> expression OP_TIMES expression','expression',3,'p_expression_bin_op','parser.py',41),
  ('expression -> expression OP_DIVIDE expression','expression',3,'p_expression_bin_op','parser.py',42),
  ('expression -> expression OP_GT expression','expression',3,'p_expression_bin_op','parser.py',43),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',48),
  ('expression -> NUMBER','expression',1,'p_term_factor','parser.py',51),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_expr','parser.py',55),
]
