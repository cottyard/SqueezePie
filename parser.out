Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> while_stmt
Rule 5     statement -> define_stmt
Rule 6     statement -> assign_stmt
Rule 7     statement -> expression SEMICOLON
Rule 8     statement -> return_stmt
Rule 9     define_stmt -> VAR ID OP_EQUAL expression SEMICOLON
Rule 10    assign_stmt -> ID OP_EQUAL expression SEMICOLON
Rule 11    while_stmt -> WHILE LPAREN expression RPAREN compound_statements
Rule 12    return_stmt -> RETURN SEMICOLON
Rule 13    return_stmt -> RETURN expression SEMICOLON
Rule 14    compound_statements -> LBRACKET statements RBRACKET
Rule 15    expression -> expression OP_PLUS expression
Rule 16    expression -> expression OP_MINUS expression
Rule 17    expression -> expression OP_TIMES expression
Rule 18    expression -> expression OP_DIVIDE expression
Rule 19    expression -> expression OP_GT expression
Rule 20    expression -> ID
Rule 21    expression -> NUMBER
Rule 22    expression -> LPAREN expression RPAREN
Rule 23    expression -> function_call
Rule 24    expression -> function_decl
Rule 25    function_call -> ID LPAREN arguments RPAREN
Rule 26    arguments -> argument arguments_rest
Rule 27    arguments_rest -> COMMA argument arguments_rest
Rule 28    arguments_rest -> <empty>
Rule 29    argument -> expression
Rule 30    function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements
Rule 31    parameters -> parameter parameters_rest
Rule 32    parameters_rest -> COMMA parameter parameters_rest
Rule 33    parameters_rest -> <empty>
Rule 34    parameter -> ID

Terminals, with rules where they appear

COMMA                : 27 32
FUNCTION             : 30
ID                   : 9 10 20 25 34
LBRACKET             : 14
LPAREN               : 11 22 25 30
NUMBER               : 21
OP_DIVIDE            : 18
OP_EQUAL             : 9 10
OP_GT                : 19
OP_MINUS             : 16
OP_PLUS              : 15
OP_TIMES             : 17
RBRACKET             : 14
RETURN               : 12 13
RPAREN               : 11 22 25 30
SEMICOLON            : 7 9 10 12 13
VAR                  : 9
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

argument             : 26 27
arguments            : 25
arguments_rest       : 26 27
assign_stmt          : 6
compound_statements  : 11 30
define_stmt          : 5
expression           : 7 9 10 11 13 15 15 16 16 17 17 18 18 19 19 22 29
function_call        : 23
function_decl        : 24
parameter            : 31 32
parameters           : 30
parameters_rest      : 31 32
program              : 0
return_stmt          : 8
statement            : 2
statements           : 1 2 14
while_stmt           : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    WHILE           reduce using rule 3 (statements -> .)
    VAR             reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)
    NUMBER          reduce using rule 3 (statements -> .)
    LPAREN          reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    FUNCTION        reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . while_stmt
    (5) statement -> . define_stmt
    (6) statement -> . assign_stmt
    (7) statement -> . expression SEMICOLON
    (8) statement -> . return_stmt
    (11) while_stmt -> . WHILE LPAREN expression RPAREN compound_statements
    (9) define_stmt -> . VAR ID OP_EQUAL expression SEMICOLON
    (10) assign_stmt -> . ID OP_EQUAL expression SEMICOLON
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (12) return_stmt -> . RETURN SEMICOLON
    (13) return_stmt -> . RETURN expression SEMICOLON
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    $end            reduce using rule 1 (program -> statements .)
    WHILE           shift and go to state 6
    VAR             shift and go to state 5
    ID              shift and go to state 14
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    define_stmt                    shift and go to state 9
    function_call                  shift and go to state 4
    assign_stmt                    shift and go to state 10
    while_stmt                     shift and go to state 16
    return_stmt                    shift and go to state 7
    statement                      shift and go to state 11
    expression                     shift and go to state 17

state 3

    (21) expression -> NUMBER .

    OP_PLUS         reduce using rule 21 (expression -> NUMBER .)
    OP_MINUS        reduce using rule 21 (expression -> NUMBER .)
    OP_TIMES        reduce using rule 21 (expression -> NUMBER .)
    OP_DIVIDE       reduce using rule 21 (expression -> NUMBER .)
    OP_GT           reduce using rule 21 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 21 (expression -> NUMBER .)
    RPAREN          reduce using rule 21 (expression -> NUMBER .)
    COMMA           reduce using rule 21 (expression -> NUMBER .)


state 4

    (23) expression -> function_call .

    OP_PLUS         reduce using rule 23 (expression -> function_call .)
    OP_MINUS        reduce using rule 23 (expression -> function_call .)
    OP_TIMES        reduce using rule 23 (expression -> function_call .)
    OP_DIVIDE       reduce using rule 23 (expression -> function_call .)
    OP_GT           reduce using rule 23 (expression -> function_call .)
    SEMICOLON       reduce using rule 23 (expression -> function_call .)
    RPAREN          reduce using rule 23 (expression -> function_call .)
    COMMA           reduce using rule 23 (expression -> function_call .)


state 5

    (9) define_stmt -> VAR . ID OP_EQUAL expression SEMICOLON

    ID              shift and go to state 18


state 6

    (11) while_stmt -> WHILE . LPAREN expression RPAREN compound_statements

    LPAREN          shift and go to state 19


state 7

    (8) statement -> return_stmt .

    RBRACKET        reduce using rule 8 (statement -> return_stmt .)
    WHILE           reduce using rule 8 (statement -> return_stmt .)
    VAR             reduce using rule 8 (statement -> return_stmt .)
    ID              reduce using rule 8 (statement -> return_stmt .)
    NUMBER          reduce using rule 8 (statement -> return_stmt .)
    LPAREN          reduce using rule 8 (statement -> return_stmt .)
    RETURN          reduce using rule 8 (statement -> return_stmt .)
    FUNCTION        reduce using rule 8 (statement -> return_stmt .)
    $end            reduce using rule 8 (statement -> return_stmt .)


state 8

    (12) return_stmt -> RETURN . SEMICOLON
    (13) return_stmt -> RETURN . expression SEMICOLON
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    SEMICOLON       shift and go to state 20
    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    function_call                  shift and go to state 4
    expression                     shift and go to state 21

state 9

    (5) statement -> define_stmt .

    RBRACKET        reduce using rule 5 (statement -> define_stmt .)
    WHILE           reduce using rule 5 (statement -> define_stmt .)
    VAR             reduce using rule 5 (statement -> define_stmt .)
    ID              reduce using rule 5 (statement -> define_stmt .)
    NUMBER          reduce using rule 5 (statement -> define_stmt .)
    LPAREN          reduce using rule 5 (statement -> define_stmt .)
    RETURN          reduce using rule 5 (statement -> define_stmt .)
    FUNCTION        reduce using rule 5 (statement -> define_stmt .)
    $end            reduce using rule 5 (statement -> define_stmt .)


state 10

    (6) statement -> assign_stmt .

    RBRACKET        reduce using rule 6 (statement -> assign_stmt .)
    WHILE           reduce using rule 6 (statement -> assign_stmt .)
    VAR             reduce using rule 6 (statement -> assign_stmt .)
    ID              reduce using rule 6 (statement -> assign_stmt .)
    NUMBER          reduce using rule 6 (statement -> assign_stmt .)
    LPAREN          reduce using rule 6 (statement -> assign_stmt .)
    RETURN          reduce using rule 6 (statement -> assign_stmt .)
    FUNCTION        reduce using rule 6 (statement -> assign_stmt .)
    $end            reduce using rule 6 (statement -> assign_stmt .)


state 11

    (2) statements -> statements statement .

    RBRACKET        reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    NUMBER          reduce using rule 2 (statements -> statements statement .)
    LPAREN          reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    FUNCTION        reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 12

    (30) function_decl -> FUNCTION . LPAREN parameters RPAREN compound_statements

    LPAREN          shift and go to state 23


state 13

    (22) expression -> LPAREN . expression RPAREN
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    function_call                  shift and go to state 4
    expression                     shift and go to state 24

state 14

    (10) assign_stmt -> ID . OP_EQUAL expression SEMICOLON
    (20) expression -> ID .
    (25) function_call -> ID . LPAREN arguments RPAREN

    OP_EQUAL        shift and go to state 26
    SEMICOLON       reduce using rule 20 (expression -> ID .)
    OP_PLUS         reduce using rule 20 (expression -> ID .)
    OP_MINUS        reduce using rule 20 (expression -> ID .)
    OP_TIMES        reduce using rule 20 (expression -> ID .)
    OP_DIVIDE       reduce using rule 20 (expression -> ID .)
    OP_GT           reduce using rule 20 (expression -> ID .)
    LPAREN          shift and go to state 25


state 15

    (24) expression -> function_decl .

    OP_PLUS         reduce using rule 24 (expression -> function_decl .)
    OP_MINUS        reduce using rule 24 (expression -> function_decl .)
    OP_TIMES        reduce using rule 24 (expression -> function_decl .)
    OP_DIVIDE       reduce using rule 24 (expression -> function_decl .)
    OP_GT           reduce using rule 24 (expression -> function_decl .)
    SEMICOLON       reduce using rule 24 (expression -> function_decl .)
    RPAREN          reduce using rule 24 (expression -> function_decl .)
    COMMA           reduce using rule 24 (expression -> function_decl .)


state 16

    (4) statement -> while_stmt .

    RBRACKET        reduce using rule 4 (statement -> while_stmt .)
    WHILE           reduce using rule 4 (statement -> while_stmt .)
    VAR             reduce using rule 4 (statement -> while_stmt .)
    ID              reduce using rule 4 (statement -> while_stmt .)
    NUMBER          reduce using rule 4 (statement -> while_stmt .)
    LPAREN          reduce using rule 4 (statement -> while_stmt .)
    RETURN          reduce using rule 4 (statement -> while_stmt .)
    FUNCTION        reduce using rule 4 (statement -> while_stmt .)
    $end            reduce using rule 4 (statement -> while_stmt .)


state 17

    (7) statement -> expression . SEMICOLON
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    SEMICOLON       shift and go to state 28
    OP_PLUS         shift and go to state 32
    OP_MINUS        shift and go to state 29
    OP_TIMES        shift and go to state 30
    OP_DIVIDE       shift and go to state 27
    OP_GT           shift and go to state 31


state 18

    (9) define_stmt -> VAR ID . OP_EQUAL expression SEMICOLON

    OP_EQUAL        shift and go to state 33


state 19

    (11) while_stmt -> WHILE LPAREN . expression RPAREN compound_statements
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    function_call                  shift and go to state 4
    expression                     shift and go to state 34

state 20

    (12) return_stmt -> RETURN SEMICOLON .

    RBRACKET        reduce using rule 12 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 12 (return_stmt -> RETURN SEMICOLON .)
    VAR             reduce using rule 12 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 12 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 12 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 12 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 12 (return_stmt -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 12 (return_stmt -> RETURN SEMICOLON .)
    $end            reduce using rule 12 (return_stmt -> RETURN SEMICOLON .)


state 21

    (13) return_stmt -> RETURN expression . SEMICOLON
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    SEMICOLON       shift and go to state 35
    OP_PLUS         shift and go to state 32
    OP_MINUS        shift and go to state 29
    OP_TIMES        shift and go to state 30
    OP_DIVIDE       shift and go to state 27
    OP_GT           shift and go to state 31


state 22

    (20) expression -> ID .
    (25) function_call -> ID . LPAREN arguments RPAREN

    OP_PLUS         reduce using rule 20 (expression -> ID .)
    OP_MINUS        reduce using rule 20 (expression -> ID .)
    OP_TIMES        reduce using rule 20 (expression -> ID .)
    OP_DIVIDE       reduce using rule 20 (expression -> ID .)
    OP_GT           reduce using rule 20 (expression -> ID .)
    SEMICOLON       reduce using rule 20 (expression -> ID .)
    RPAREN          reduce using rule 20 (expression -> ID .)
    COMMA           reduce using rule 20 (expression -> ID .)
    LPAREN          shift and go to state 25


state 23

    (30) function_decl -> FUNCTION LPAREN . parameters RPAREN compound_statements
    (31) parameters -> . parameter parameters_rest
    (34) parameter -> . ID

    ID              shift and go to state 38

    parameter                      shift and go to state 37
    parameters                     shift and go to state 36

state 24

    (22) expression -> LPAREN expression . RPAREN
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    RPAREN          shift and go to state 39
    OP_PLUS         shift and go to state 32
    OP_MINUS        shift and go to state 29
    OP_TIMES        shift and go to state 30
    OP_DIVIDE       shift and go to state 27
    OP_GT           shift and go to state 31


state 25

    (25) function_call -> ID LPAREN . arguments RPAREN
    (26) arguments -> . argument arguments_rest
    (29) argument -> . expression
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    argument                       shift and go to state 40
    function_call                  shift and go to state 4
    arguments                      shift and go to state 41
    expression                     shift and go to state 42

state 26

    (10) assign_stmt -> ID OP_EQUAL . expression SEMICOLON
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    function_call                  shift and go to state 4
    expression                     shift and go to state 43

state 27

    (18) expression -> expression OP_DIVIDE . expression
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    function_call                  shift and go to state 4
    expression                     shift and go to state 44

state 28

    (7) statement -> expression SEMICOLON .

    RBRACKET        reduce using rule 7 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 7 (statement -> expression SEMICOLON .)
    ID              reduce using rule 7 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 7 (statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 7 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 7 (statement -> expression SEMICOLON .)
    $end            reduce using rule 7 (statement -> expression SEMICOLON .)


state 29

    (16) expression -> expression OP_MINUS . expression
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    function_call                  shift and go to state 4
    expression                     shift and go to state 45

state 30

    (17) expression -> expression OP_TIMES . expression
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    function_call                  shift and go to state 4
    expression                     shift and go to state 46

state 31

    (19) expression -> expression OP_GT . expression
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    function_call                  shift and go to state 4
    expression                     shift and go to state 47

state 32

    (15) expression -> expression OP_PLUS . expression
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    function_call                  shift and go to state 4
    expression                     shift and go to state 48

state 33

    (9) define_stmt -> VAR ID OP_EQUAL . expression SEMICOLON
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    function_call                  shift and go to state 4
    expression                     shift and go to state 49

state 34

    (11) while_stmt -> WHILE LPAREN expression . RPAREN compound_statements
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    RPAREN          shift and go to state 50
    OP_PLUS         shift and go to state 32
    OP_MINUS        shift and go to state 29
    OP_TIMES        shift and go to state 30
    OP_DIVIDE       shift and go to state 27
    OP_GT           shift and go to state 31


state 35

    (13) return_stmt -> RETURN expression SEMICOLON .

    RBRACKET        reduce using rule 13 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 13 (return_stmt -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 13 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 13 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 13 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 13 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 13 (return_stmt -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 13 (return_stmt -> RETURN expression SEMICOLON .)
    $end            reduce using rule 13 (return_stmt -> RETURN expression SEMICOLON .)


state 36

    (30) function_decl -> FUNCTION LPAREN parameters . RPAREN compound_statements

    RPAREN          shift and go to state 51


state 37

    (31) parameters -> parameter . parameters_rest
    (32) parameters_rest -> . COMMA parameter parameters_rest
    (33) parameters_rest -> .

    COMMA           shift and go to state 52
    RPAREN          reduce using rule 33 (parameters_rest -> .)

    parameters_rest                shift and go to state 53

state 38

    (34) parameter -> ID .

    COMMA           reduce using rule 34 (parameter -> ID .)
    RPAREN          reduce using rule 34 (parameter -> ID .)


state 39

    (22) expression -> LPAREN expression RPAREN .

    OP_PLUS         reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    OP_MINUS        reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    OP_TIMES        reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    OP_DIVIDE       reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    OP_GT           reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 22 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 22 (expression -> LPAREN expression RPAREN .)


state 40

    (26) arguments -> argument . arguments_rest
    (27) arguments_rest -> . COMMA argument arguments_rest
    (28) arguments_rest -> .

    COMMA           shift and go to state 54
    RPAREN          reduce using rule 28 (arguments_rest -> .)

    arguments_rest                 shift and go to state 55

state 41

    (25) function_call -> ID LPAREN arguments . RPAREN

    RPAREN          shift and go to state 56


state 42

    (29) argument -> expression .
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    COMMA           reduce using rule 29 (argument -> expression .)
    RPAREN          reduce using rule 29 (argument -> expression .)
    OP_PLUS         shift and go to state 32
    OP_MINUS        shift and go to state 29
    OP_TIMES        shift and go to state 30
    OP_DIVIDE       shift and go to state 27
    OP_GT           shift and go to state 31


state 43

    (10) assign_stmt -> ID OP_EQUAL expression . SEMICOLON
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    SEMICOLON       shift and go to state 57
    OP_PLUS         shift and go to state 32
    OP_MINUS        shift and go to state 29
    OP_TIMES        shift and go to state 30
    OP_DIVIDE       shift and go to state 27
    OP_GT           shift and go to state 31


state 44

    (18) expression -> expression OP_DIVIDE expression .
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    OP_PLUS         reduce using rule 18 (expression -> expression OP_DIVIDE expression .)
    OP_MINUS        reduce using rule 18 (expression -> expression OP_DIVIDE expression .)
    OP_TIMES        reduce using rule 18 (expression -> expression OP_DIVIDE expression .)
    OP_DIVIDE       reduce using rule 18 (expression -> expression OP_DIVIDE expression .)
    OP_GT           reduce using rule 18 (expression -> expression OP_DIVIDE expression .)
    SEMICOLON       reduce using rule 18 (expression -> expression OP_DIVIDE expression .)
    RPAREN          reduce using rule 18 (expression -> expression OP_DIVIDE expression .)
    COMMA           reduce using rule 18 (expression -> expression OP_DIVIDE expression .)

  ! OP_PLUS         [ shift and go to state 32 ]
  ! OP_MINUS        [ shift and go to state 29 ]
  ! OP_TIMES        [ shift and go to state 30 ]
  ! OP_DIVIDE       [ shift and go to state 27 ]
  ! OP_GT           [ shift and go to state 31 ]


state 45

    (16) expression -> expression OP_MINUS expression .
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    OP_PLUS         reduce using rule 16 (expression -> expression OP_MINUS expression .)
    OP_MINUS        reduce using rule 16 (expression -> expression OP_MINUS expression .)
    OP_GT           reduce using rule 16 (expression -> expression OP_MINUS expression .)
    SEMICOLON       reduce using rule 16 (expression -> expression OP_MINUS expression .)
    RPAREN          reduce using rule 16 (expression -> expression OP_MINUS expression .)
    COMMA           reduce using rule 16 (expression -> expression OP_MINUS expression .)
    OP_TIMES        shift and go to state 30
    OP_DIVIDE       shift and go to state 27

  ! OP_TIMES        [ reduce using rule 16 (expression -> expression OP_MINUS expression .) ]
  ! OP_DIVIDE       [ reduce using rule 16 (expression -> expression OP_MINUS expression .) ]
  ! OP_PLUS         [ shift and go to state 32 ]
  ! OP_MINUS        [ shift and go to state 29 ]
  ! OP_GT           [ shift and go to state 31 ]


state 46

    (17) expression -> expression OP_TIMES expression .
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    OP_PLUS         reduce using rule 17 (expression -> expression OP_TIMES expression .)
    OP_MINUS        reduce using rule 17 (expression -> expression OP_TIMES expression .)
    OP_TIMES        reduce using rule 17 (expression -> expression OP_TIMES expression .)
    OP_DIVIDE       reduce using rule 17 (expression -> expression OP_TIMES expression .)
    OP_GT           reduce using rule 17 (expression -> expression OP_TIMES expression .)
    SEMICOLON       reduce using rule 17 (expression -> expression OP_TIMES expression .)
    RPAREN          reduce using rule 17 (expression -> expression OP_TIMES expression .)
    COMMA           reduce using rule 17 (expression -> expression OP_TIMES expression .)

  ! OP_PLUS         [ shift and go to state 32 ]
  ! OP_MINUS        [ shift and go to state 29 ]
  ! OP_TIMES        [ shift and go to state 30 ]
  ! OP_DIVIDE       [ shift and go to state 27 ]
  ! OP_GT           [ shift and go to state 31 ]


state 47

    (19) expression -> expression OP_GT expression .
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    OP_GT           reduce using rule 19 (expression -> expression OP_GT expression .)
    SEMICOLON       reduce using rule 19 (expression -> expression OP_GT expression .)
    RPAREN          reduce using rule 19 (expression -> expression OP_GT expression .)
    COMMA           reduce using rule 19 (expression -> expression OP_GT expression .)
    OP_PLUS         shift and go to state 32
    OP_MINUS        shift and go to state 29
    OP_TIMES        shift and go to state 30
    OP_DIVIDE       shift and go to state 27

  ! OP_PLUS         [ reduce using rule 19 (expression -> expression OP_GT expression .) ]
  ! OP_MINUS        [ reduce using rule 19 (expression -> expression OP_GT expression .) ]
  ! OP_TIMES        [ reduce using rule 19 (expression -> expression OP_GT expression .) ]
  ! OP_DIVIDE       [ reduce using rule 19 (expression -> expression OP_GT expression .) ]
  ! OP_GT           [ shift and go to state 31 ]


state 48

    (15) expression -> expression OP_PLUS expression .
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    OP_PLUS         reduce using rule 15 (expression -> expression OP_PLUS expression .)
    OP_MINUS        reduce using rule 15 (expression -> expression OP_PLUS expression .)
    OP_GT           reduce using rule 15 (expression -> expression OP_PLUS expression .)
    SEMICOLON       reduce using rule 15 (expression -> expression OP_PLUS expression .)
    RPAREN          reduce using rule 15 (expression -> expression OP_PLUS expression .)
    COMMA           reduce using rule 15 (expression -> expression OP_PLUS expression .)
    OP_TIMES        shift and go to state 30
    OP_DIVIDE       shift and go to state 27

  ! OP_TIMES        [ reduce using rule 15 (expression -> expression OP_PLUS expression .) ]
  ! OP_DIVIDE       [ reduce using rule 15 (expression -> expression OP_PLUS expression .) ]
  ! OP_PLUS         [ shift and go to state 32 ]
  ! OP_MINUS        [ shift and go to state 29 ]
  ! OP_GT           [ shift and go to state 31 ]


state 49

    (9) define_stmt -> VAR ID OP_EQUAL expression . SEMICOLON
    (15) expression -> expression . OP_PLUS expression
    (16) expression -> expression . OP_MINUS expression
    (17) expression -> expression . OP_TIMES expression
    (18) expression -> expression . OP_DIVIDE expression
    (19) expression -> expression . OP_GT expression

    SEMICOLON       shift and go to state 58
    OP_PLUS         shift and go to state 32
    OP_MINUS        shift and go to state 29
    OP_TIMES        shift and go to state 30
    OP_DIVIDE       shift and go to state 27
    OP_GT           shift and go to state 31


state 50

    (11) while_stmt -> WHILE LPAREN expression RPAREN . compound_statements
    (14) compound_statements -> . LBRACKET statements RBRACKET

    LBRACKET        shift and go to state 59

    compound_statements            shift and go to state 60

state 51

    (30) function_decl -> FUNCTION LPAREN parameters RPAREN . compound_statements
    (14) compound_statements -> . LBRACKET statements RBRACKET

    LBRACKET        shift and go to state 59

    compound_statements            shift and go to state 61

state 52

    (32) parameters_rest -> COMMA . parameter parameters_rest
    (34) parameter -> . ID

    ID              shift and go to state 38

    parameter                      shift and go to state 62

state 53

    (31) parameters -> parameter parameters_rest .

    RPAREN          reduce using rule 31 (parameters -> parameter parameters_rest .)


state 54

    (27) arguments_rest -> COMMA . argument arguments_rest
    (29) argument -> . expression
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 22
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    argument                       shift and go to state 63
    function_call                  shift and go to state 4
    expression                     shift and go to state 42

state 55

    (26) arguments -> argument arguments_rest .

    RPAREN          reduce using rule 26 (arguments -> argument arguments_rest .)


state 56

    (25) function_call -> ID LPAREN arguments RPAREN .

    SEMICOLON       reduce using rule 25 (function_call -> ID LPAREN arguments RPAREN .)
    OP_PLUS         reduce using rule 25 (function_call -> ID LPAREN arguments RPAREN .)
    OP_MINUS        reduce using rule 25 (function_call -> ID LPAREN arguments RPAREN .)
    OP_TIMES        reduce using rule 25 (function_call -> ID LPAREN arguments RPAREN .)
    OP_DIVIDE       reduce using rule 25 (function_call -> ID LPAREN arguments RPAREN .)
    OP_GT           reduce using rule 25 (function_call -> ID LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 25 (function_call -> ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 25 (function_call -> ID LPAREN arguments RPAREN .)


state 57

    (10) assign_stmt -> ID OP_EQUAL expression SEMICOLON .

    RBRACKET        reduce using rule 10 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 10 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    VAR             reduce using rule 10 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    ID              reduce using rule 10 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 10 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 10 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 10 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 10 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    $end            reduce using rule 10 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)


state 58

    (9) define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .

    RBRACKET        reduce using rule 9 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 9 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    VAR             reduce using rule 9 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    ID              reduce using rule 9 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 9 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 9 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 9 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 9 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    $end            reduce using rule 9 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)


state 59

    (14) compound_statements -> LBRACKET . statements RBRACKET
    (2) statements -> . statements statement
    (3) statements -> .

    RBRACKET        reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    VAR             reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)
    NUMBER          reduce using rule 3 (statements -> .)
    LPAREN          reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    FUNCTION        reduce using rule 3 (statements -> .)

    statements                     shift and go to state 64

state 60

    (11) while_stmt -> WHILE LPAREN expression RPAREN compound_statements .

    WHILE           reduce using rule 11 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    VAR             reduce using rule 11 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    ID              reduce using rule 11 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    NUMBER          reduce using rule 11 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    LPAREN          reduce using rule 11 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    RETURN          reduce using rule 11 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    FUNCTION        reduce using rule 11 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    $end            reduce using rule 11 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    RBRACKET        reduce using rule 11 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)


state 61

    (30) function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .

    OP_PLUS         reduce using rule 30 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    OP_MINUS        reduce using rule 30 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    OP_TIMES        reduce using rule 30 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    OP_DIVIDE       reduce using rule 30 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    OP_GT           reduce using rule 30 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    SEMICOLON       reduce using rule 30 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    RPAREN          reduce using rule 30 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    COMMA           reduce using rule 30 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)


state 62

    (32) parameters_rest -> COMMA parameter . parameters_rest
    (32) parameters_rest -> . COMMA parameter parameters_rest
    (33) parameters_rest -> .

    COMMA           shift and go to state 52
    RPAREN          reduce using rule 33 (parameters_rest -> .)

    parameters_rest                shift and go to state 65

state 63

    (27) arguments_rest -> COMMA argument . arguments_rest
    (27) arguments_rest -> . COMMA argument arguments_rest
    (28) arguments_rest -> .

    COMMA           shift and go to state 54
    RPAREN          reduce using rule 28 (arguments_rest -> .)

    arguments_rest                 shift and go to state 66

state 64

    (14) compound_statements -> LBRACKET statements . RBRACKET
    (2) statements -> statements . statement
    (4) statement -> . while_stmt
    (5) statement -> . define_stmt
    (6) statement -> . assign_stmt
    (7) statement -> . expression SEMICOLON
    (8) statement -> . return_stmt
    (11) while_stmt -> . WHILE LPAREN expression RPAREN compound_statements
    (9) define_stmt -> . VAR ID OP_EQUAL expression SEMICOLON
    (10) assign_stmt -> . ID OP_EQUAL expression SEMICOLON
    (15) expression -> . expression OP_PLUS expression
    (16) expression -> . expression OP_MINUS expression
    (17) expression -> . expression OP_TIMES expression
    (18) expression -> . expression OP_DIVIDE expression
    (19) expression -> . expression OP_GT expression
    (20) expression -> . ID
    (21) expression -> . NUMBER
    (22) expression -> . LPAREN expression RPAREN
    (23) expression -> . function_call
    (24) expression -> . function_decl
    (12) return_stmt -> . RETURN SEMICOLON
    (13) return_stmt -> . RETURN expression SEMICOLON
    (25) function_call -> . ID LPAREN arguments RPAREN
    (30) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    RBRACKET        shift and go to state 67
    WHILE           shift and go to state 6
    VAR             shift and go to state 5
    ID              shift and go to state 14
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 15
    define_stmt                    shift and go to state 9
    function_call                  shift and go to state 4
    assign_stmt                    shift and go to state 10
    while_stmt                     shift and go to state 16
    return_stmt                    shift and go to state 7
    statement                      shift and go to state 11
    expression                     shift and go to state 17

state 65

    (32) parameters_rest -> COMMA parameter parameters_rest .

    RPAREN          reduce using rule 32 (parameters_rest -> COMMA parameter parameters_rest .)


state 66

    (27) arguments_rest -> COMMA argument arguments_rest .

    RPAREN          reduce using rule 27 (arguments_rest -> COMMA argument arguments_rest .)


state 67

    (14) compound_statements -> LBRACKET statements RBRACKET .

    WHILE           reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    VAR             reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    ID              reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    NUMBER          reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    LPAREN          reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    RETURN          reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    FUNCTION        reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    $end            reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    RBRACKET        reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    SEMICOLON       reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    OP_PLUS         reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    OP_MINUS        reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    OP_TIMES        reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    OP_DIVIDE       reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    OP_GT           reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    RPAREN          reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)
    COMMA           reduce using rule 14 (compound_statements -> LBRACKET statements RBRACKET .)

