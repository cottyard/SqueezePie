Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> <empty>
Rule 4     statement -> while_stmt
Rule 5     statement -> define_stmt
Rule 6     statement -> assign_stmt
Rule 7     statement -> expression SEMICOLON
Rule 8     statement -> return_stmt
Rule 9     statement -> if_stmt
Rule 10    define_stmt -> VAR ID OP_EQUAL expression SEMICOLON
Rule 11    assign_stmt -> ID OP_EQUAL expression SEMICOLON
Rule 12    while_stmt -> WHILE LPAREN expression RPAREN compound_statements
Rule 13    return_stmt -> RETURN SEMICOLON
Rule 14    return_stmt -> RETURN expression SEMICOLON
Rule 15    if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause
Rule 16    else_clause -> <empty>
Rule 17    else_clause -> ELSE compound_statements
Rule 18    compound_statements -> LBRACKET statements RBRACKET
Rule 19    expression -> expression OP_PLUS expression
Rule 20    expression -> expression OP_MINUS expression
Rule 21    expression -> expression OP_TIMES expression
Rule 22    expression -> expression OP_DIVIDE expression
Rule 23    expression -> expression OP_GT expression
Rule 24    expression -> ID
Rule 25    expression -> NUMBER
Rule 26    expression -> LPAREN expression RPAREN
Rule 27    expression -> function_call
Rule 28    expression -> function_decl
Rule 29    function_call -> ID LPAREN arguments RPAREN
Rule 30    arguments -> argument arguments_rest
Rule 31    arguments_rest -> COMMA argument arguments_rest
Rule 32    arguments_rest -> <empty>
Rule 33    argument -> expression
Rule 34    function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements
Rule 35    parameters -> parameter parameters_rest
Rule 36    parameters_rest -> COMMA parameter parameters_rest
Rule 37    parameters_rest -> <empty>
Rule 38    parameter -> ID

Terminals, with rules where they appear

COMMA                : 31 36
ELSE                 : 17
FUNCTION             : 34
ID                   : 10 11 24 29 38
IF                   : 15
LBRACKET             : 18
LPAREN               : 12 15 26 29 34
NUMBER               : 25
OP_DIVIDE            : 22
OP_EQUAL             : 10 11
OP_GT                : 23
OP_MINUS             : 20
OP_PLUS              : 19
OP_TIMES             : 21
RBRACKET             : 18
RETURN               : 13 14
RPAREN               : 12 15 26 29 34
SEMICOLON            : 7 10 11 13 14
VAR                  : 10
WHILE                : 12
error                : 

Nonterminals, with rules where they appear

argument             : 30 31
arguments            : 29
arguments_rest       : 30 31
assign_stmt          : 6
compound_statements  : 12 15 17 34
define_stmt          : 5
else_clause          : 15
expression           : 7 10 11 12 14 15 19 19 20 20 21 21 22 22 23 23 26 33
function_call        : 27
function_decl        : 28
if_stmt              : 9
parameter            : 35 36
parameters           : 34
parameters_rest      : 35 36
program              : 0
return_stmt          : 8
statement            : 2
statements           : 1 2 18
while_stmt           : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> .

    WHILE           reduce using rule 3 (statements -> .)
    VAR             reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)
    NUMBER          reduce using rule 3 (statements -> .)
    LPAREN          reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    FUNCTION        reduce using rule 3 (statements -> .)
    $end            reduce using rule 3 (statements -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . while_stmt
    (5) statement -> . define_stmt
    (6) statement -> . assign_stmt
    (7) statement -> . expression SEMICOLON
    (8) statement -> . return_stmt
    (9) statement -> . if_stmt
    (12) while_stmt -> . WHILE LPAREN expression RPAREN compound_statements
    (10) define_stmt -> . VAR ID OP_EQUAL expression SEMICOLON
    (11) assign_stmt -> . ID OP_EQUAL expression SEMICOLON
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (13) return_stmt -> . RETURN SEMICOLON
    (14) return_stmt -> . RETURN expression SEMICOLON
    (15) if_stmt -> . IF LPAREN expression RPAREN compound_statements else_clause
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    $end            reduce using rule 1 (program -> statements .)
    WHILE           shift and go to state 6
    VAR             shift and go to state 5
    ID              shift and go to state 14
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 8
    IF              shift and go to state 15
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    if_stmt                        shift and go to state 17
    define_stmt                    shift and go to state 9
    function_call                  shift and go to state 4
    assign_stmt                    shift and go to state 10
    while_stmt                     shift and go to state 18
    return_stmt                    shift and go to state 7
    statement                      shift and go to state 11
    expression                     shift and go to state 19

state 3

    (25) expression -> NUMBER .

    SEMICOLON       reduce using rule 25 (expression -> NUMBER .)
    OP_PLUS         reduce using rule 25 (expression -> NUMBER .)
    OP_MINUS        reduce using rule 25 (expression -> NUMBER .)
    OP_TIMES        reduce using rule 25 (expression -> NUMBER .)
    OP_DIVIDE       reduce using rule 25 (expression -> NUMBER .)
    OP_GT           reduce using rule 25 (expression -> NUMBER .)
    COMMA           reduce using rule 25 (expression -> NUMBER .)
    RPAREN          reduce using rule 25 (expression -> NUMBER .)


state 4

    (27) expression -> function_call .

    SEMICOLON       reduce using rule 27 (expression -> function_call .)
    OP_PLUS         reduce using rule 27 (expression -> function_call .)
    OP_MINUS        reduce using rule 27 (expression -> function_call .)
    OP_TIMES        reduce using rule 27 (expression -> function_call .)
    OP_DIVIDE       reduce using rule 27 (expression -> function_call .)
    OP_GT           reduce using rule 27 (expression -> function_call .)
    COMMA           reduce using rule 27 (expression -> function_call .)
    RPAREN          reduce using rule 27 (expression -> function_call .)


state 5

    (10) define_stmt -> VAR . ID OP_EQUAL expression SEMICOLON

    ID              shift and go to state 20


state 6

    (12) while_stmt -> WHILE . LPAREN expression RPAREN compound_statements

    LPAREN          shift and go to state 21


state 7

    (8) statement -> return_stmt .

    RBRACKET        reduce using rule 8 (statement -> return_stmt .)
    WHILE           reduce using rule 8 (statement -> return_stmt .)
    VAR             reduce using rule 8 (statement -> return_stmt .)
    ID              reduce using rule 8 (statement -> return_stmt .)
    NUMBER          reduce using rule 8 (statement -> return_stmt .)
    LPAREN          reduce using rule 8 (statement -> return_stmt .)
    RETURN          reduce using rule 8 (statement -> return_stmt .)
    IF              reduce using rule 8 (statement -> return_stmt .)
    FUNCTION        reduce using rule 8 (statement -> return_stmt .)
    $end            reduce using rule 8 (statement -> return_stmt .)


state 8

    (13) return_stmt -> RETURN . SEMICOLON
    (14) return_stmt -> RETURN . expression SEMICOLON
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    SEMICOLON       shift and go to state 22
    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 23

state 9

    (5) statement -> define_stmt .

    RBRACKET        reduce using rule 5 (statement -> define_stmt .)
    WHILE           reduce using rule 5 (statement -> define_stmt .)
    VAR             reduce using rule 5 (statement -> define_stmt .)
    ID              reduce using rule 5 (statement -> define_stmt .)
    NUMBER          reduce using rule 5 (statement -> define_stmt .)
    LPAREN          reduce using rule 5 (statement -> define_stmt .)
    RETURN          reduce using rule 5 (statement -> define_stmt .)
    IF              reduce using rule 5 (statement -> define_stmt .)
    FUNCTION        reduce using rule 5 (statement -> define_stmt .)
    $end            reduce using rule 5 (statement -> define_stmt .)


state 10

    (6) statement -> assign_stmt .

    RBRACKET        reduce using rule 6 (statement -> assign_stmt .)
    WHILE           reduce using rule 6 (statement -> assign_stmt .)
    VAR             reduce using rule 6 (statement -> assign_stmt .)
    ID              reduce using rule 6 (statement -> assign_stmt .)
    NUMBER          reduce using rule 6 (statement -> assign_stmt .)
    LPAREN          reduce using rule 6 (statement -> assign_stmt .)
    RETURN          reduce using rule 6 (statement -> assign_stmt .)
    IF              reduce using rule 6 (statement -> assign_stmt .)
    FUNCTION        reduce using rule 6 (statement -> assign_stmt .)
    $end            reduce using rule 6 (statement -> assign_stmt .)


state 11

    (2) statements -> statements statement .

    RBRACKET        reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    NUMBER          reduce using rule 2 (statements -> statements statement .)
    LPAREN          reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    FUNCTION        reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 12

    (34) function_decl -> FUNCTION . LPAREN parameters RPAREN compound_statements

    LPAREN          shift and go to state 25


state 13

    (26) expression -> LPAREN . expression RPAREN
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 26

state 14

    (11) assign_stmt -> ID . OP_EQUAL expression SEMICOLON
    (24) expression -> ID .
    (29) function_call -> ID . LPAREN arguments RPAREN

    OP_EQUAL        shift and go to state 28
    SEMICOLON       reduce using rule 24 (expression -> ID .)
    OP_PLUS         reduce using rule 24 (expression -> ID .)
    OP_MINUS        reduce using rule 24 (expression -> ID .)
    OP_TIMES        reduce using rule 24 (expression -> ID .)
    OP_DIVIDE       reduce using rule 24 (expression -> ID .)
    OP_GT           reduce using rule 24 (expression -> ID .)
    LPAREN          shift and go to state 27


state 15

    (15) if_stmt -> IF . LPAREN expression RPAREN compound_statements else_clause

    LPAREN          shift and go to state 29


state 16

    (28) expression -> function_decl .

    SEMICOLON       reduce using rule 28 (expression -> function_decl .)
    OP_PLUS         reduce using rule 28 (expression -> function_decl .)
    OP_MINUS        reduce using rule 28 (expression -> function_decl .)
    OP_TIMES        reduce using rule 28 (expression -> function_decl .)
    OP_DIVIDE       reduce using rule 28 (expression -> function_decl .)
    OP_GT           reduce using rule 28 (expression -> function_decl .)
    COMMA           reduce using rule 28 (expression -> function_decl .)
    RPAREN          reduce using rule 28 (expression -> function_decl .)


state 17

    (9) statement -> if_stmt .

    RBRACKET        reduce using rule 9 (statement -> if_stmt .)
    WHILE           reduce using rule 9 (statement -> if_stmt .)
    VAR             reduce using rule 9 (statement -> if_stmt .)
    ID              reduce using rule 9 (statement -> if_stmt .)
    NUMBER          reduce using rule 9 (statement -> if_stmt .)
    LPAREN          reduce using rule 9 (statement -> if_stmt .)
    RETURN          reduce using rule 9 (statement -> if_stmt .)
    IF              reduce using rule 9 (statement -> if_stmt .)
    FUNCTION        reduce using rule 9 (statement -> if_stmt .)
    $end            reduce using rule 9 (statement -> if_stmt .)


state 18

    (4) statement -> while_stmt .

    RBRACKET        reduce using rule 4 (statement -> while_stmt .)
    WHILE           reduce using rule 4 (statement -> while_stmt .)
    VAR             reduce using rule 4 (statement -> while_stmt .)
    ID              reduce using rule 4 (statement -> while_stmt .)
    NUMBER          reduce using rule 4 (statement -> while_stmt .)
    LPAREN          reduce using rule 4 (statement -> while_stmt .)
    RETURN          reduce using rule 4 (statement -> while_stmt .)
    IF              reduce using rule 4 (statement -> while_stmt .)
    FUNCTION        reduce using rule 4 (statement -> while_stmt .)
    $end            reduce using rule 4 (statement -> while_stmt .)


state 19

    (7) statement -> expression . SEMICOLON
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    SEMICOLON       shift and go to state 31
    OP_PLUS         shift and go to state 35
    OP_MINUS        shift and go to state 32
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30
    OP_GT           shift and go to state 34


state 20

    (10) define_stmt -> VAR ID . OP_EQUAL expression SEMICOLON

    OP_EQUAL        shift and go to state 36


state 21

    (12) while_stmt -> WHILE LPAREN . expression RPAREN compound_statements
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 37

state 22

    (13) return_stmt -> RETURN SEMICOLON .

    RBRACKET        reduce using rule 13 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 13 (return_stmt -> RETURN SEMICOLON .)
    VAR             reduce using rule 13 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 13 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 13 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 13 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 13 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 13 (return_stmt -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 13 (return_stmt -> RETURN SEMICOLON .)
    $end            reduce using rule 13 (return_stmt -> RETURN SEMICOLON .)


state 23

    (14) return_stmt -> RETURN expression . SEMICOLON
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    SEMICOLON       shift and go to state 38
    OP_PLUS         shift and go to state 35
    OP_MINUS        shift and go to state 32
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30
    OP_GT           shift and go to state 34


state 24

    (24) expression -> ID .
    (29) function_call -> ID . LPAREN arguments RPAREN

    SEMICOLON       reduce using rule 24 (expression -> ID .)
    OP_PLUS         reduce using rule 24 (expression -> ID .)
    OP_MINUS        reduce using rule 24 (expression -> ID .)
    OP_TIMES        reduce using rule 24 (expression -> ID .)
    OP_DIVIDE       reduce using rule 24 (expression -> ID .)
    OP_GT           reduce using rule 24 (expression -> ID .)
    COMMA           reduce using rule 24 (expression -> ID .)
    RPAREN          reduce using rule 24 (expression -> ID .)
    LPAREN          shift and go to state 27


state 25

    (34) function_decl -> FUNCTION LPAREN . parameters RPAREN compound_statements
    (35) parameters -> . parameter parameters_rest
    (38) parameter -> . ID

    ID              shift and go to state 41

    parameter                      shift and go to state 40
    parameters                     shift and go to state 39

state 26

    (26) expression -> LPAREN expression . RPAREN
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    RPAREN          shift and go to state 42
    OP_PLUS         shift and go to state 35
    OP_MINUS        shift and go to state 32
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30
    OP_GT           shift and go to state 34


state 27

    (29) function_call -> ID LPAREN . arguments RPAREN
    (30) arguments -> . argument arguments_rest
    (33) argument -> . expression
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    argument                       shift and go to state 43
    function_call                  shift and go to state 4
    arguments                      shift and go to state 44
    expression                     shift and go to state 45

state 28

    (11) assign_stmt -> ID OP_EQUAL . expression SEMICOLON
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 46

state 29

    (15) if_stmt -> IF LPAREN . expression RPAREN compound_statements else_clause
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 47

state 30

    (22) expression -> expression OP_DIVIDE . expression
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 48

state 31

    (7) statement -> expression SEMICOLON .

    RBRACKET        reduce using rule 7 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 7 (statement -> expression SEMICOLON .)
    ID              reduce using rule 7 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 7 (statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 7 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> expression SEMICOLON .)
    IF              reduce using rule 7 (statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 7 (statement -> expression SEMICOLON .)
    $end            reduce using rule 7 (statement -> expression SEMICOLON .)


state 32

    (20) expression -> expression OP_MINUS . expression
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 49

state 33

    (21) expression -> expression OP_TIMES . expression
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 50

state 34

    (23) expression -> expression OP_GT . expression
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 51

state 35

    (19) expression -> expression OP_PLUS . expression
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 52

state 36

    (10) define_stmt -> VAR ID OP_EQUAL . expression SEMICOLON
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    function_call                  shift and go to state 4
    expression                     shift and go to state 53

state 37

    (12) while_stmt -> WHILE LPAREN expression . RPAREN compound_statements
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    RPAREN          shift and go to state 54
    OP_PLUS         shift and go to state 35
    OP_MINUS        shift and go to state 32
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30
    OP_GT           shift and go to state 34


state 38

    (14) return_stmt -> RETURN expression SEMICOLON .

    RBRACKET        reduce using rule 14 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 14 (return_stmt -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 14 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 14 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 14 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 14 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 14 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 14 (return_stmt -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 14 (return_stmt -> RETURN expression SEMICOLON .)
    $end            reduce using rule 14 (return_stmt -> RETURN expression SEMICOLON .)


state 39

    (34) function_decl -> FUNCTION LPAREN parameters . RPAREN compound_statements

    RPAREN          shift and go to state 55


state 40

    (35) parameters -> parameter . parameters_rest
    (36) parameters_rest -> . COMMA parameter parameters_rest
    (37) parameters_rest -> .

    COMMA           shift and go to state 56
    RPAREN          reduce using rule 37 (parameters_rest -> .)

    parameters_rest                shift and go to state 57

state 41

    (38) parameter -> ID .

    COMMA           reduce using rule 38 (parameter -> ID .)
    RPAREN          reduce using rule 38 (parameter -> ID .)


state 42

    (26) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    OP_PLUS         reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    OP_MINUS        reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    OP_TIMES        reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    OP_DIVIDE       reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    OP_GT           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 26 (expression -> LPAREN expression RPAREN .)


state 43

    (30) arguments -> argument . arguments_rest
    (31) arguments_rest -> . COMMA argument arguments_rest
    (32) arguments_rest -> .

    COMMA           shift and go to state 58
    RPAREN          reduce using rule 32 (arguments_rest -> .)

    arguments_rest                 shift and go to state 59

state 44

    (29) function_call -> ID LPAREN arguments . RPAREN

    RPAREN          shift and go to state 60


state 45

    (33) argument -> expression .
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    COMMA           reduce using rule 33 (argument -> expression .)
    RPAREN          reduce using rule 33 (argument -> expression .)
    OP_PLUS         shift and go to state 35
    OP_MINUS        shift and go to state 32
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30
    OP_GT           shift and go to state 34


state 46

    (11) assign_stmt -> ID OP_EQUAL expression . SEMICOLON
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    SEMICOLON       shift and go to state 61
    OP_PLUS         shift and go to state 35
    OP_MINUS        shift and go to state 32
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30
    OP_GT           shift and go to state 34


state 47

    (15) if_stmt -> IF LPAREN expression . RPAREN compound_statements else_clause
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    RPAREN          shift and go to state 62
    OP_PLUS         shift and go to state 35
    OP_MINUS        shift and go to state 32
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30
    OP_GT           shift and go to state 34


state 48

    (22) expression -> expression OP_DIVIDE expression .
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    SEMICOLON       reduce using rule 22 (expression -> expression OP_DIVIDE expression .)
    OP_PLUS         reduce using rule 22 (expression -> expression OP_DIVIDE expression .)
    OP_MINUS        reduce using rule 22 (expression -> expression OP_DIVIDE expression .)
    OP_TIMES        reduce using rule 22 (expression -> expression OP_DIVIDE expression .)
    OP_DIVIDE       reduce using rule 22 (expression -> expression OP_DIVIDE expression .)
    OP_GT           reduce using rule 22 (expression -> expression OP_DIVIDE expression .)
    COMMA           reduce using rule 22 (expression -> expression OP_DIVIDE expression .)
    RPAREN          reduce using rule 22 (expression -> expression OP_DIVIDE expression .)

  ! OP_PLUS         [ shift and go to state 35 ]
  ! OP_MINUS        [ shift and go to state 32 ]
  ! OP_TIMES        [ shift and go to state 33 ]
  ! OP_DIVIDE       [ shift and go to state 30 ]
  ! OP_GT           [ shift and go to state 34 ]


state 49

    (20) expression -> expression OP_MINUS expression .
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    SEMICOLON       reduce using rule 20 (expression -> expression OP_MINUS expression .)
    OP_PLUS         reduce using rule 20 (expression -> expression OP_MINUS expression .)
    OP_MINUS        reduce using rule 20 (expression -> expression OP_MINUS expression .)
    OP_GT           reduce using rule 20 (expression -> expression OP_MINUS expression .)
    COMMA           reduce using rule 20 (expression -> expression OP_MINUS expression .)
    RPAREN          reduce using rule 20 (expression -> expression OP_MINUS expression .)
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30

  ! OP_TIMES        [ reduce using rule 20 (expression -> expression OP_MINUS expression .) ]
  ! OP_DIVIDE       [ reduce using rule 20 (expression -> expression OP_MINUS expression .) ]
  ! OP_PLUS         [ shift and go to state 35 ]
  ! OP_MINUS        [ shift and go to state 32 ]
  ! OP_GT           [ shift and go to state 34 ]


state 50

    (21) expression -> expression OP_TIMES expression .
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    SEMICOLON       reduce using rule 21 (expression -> expression OP_TIMES expression .)
    OP_PLUS         reduce using rule 21 (expression -> expression OP_TIMES expression .)
    OP_MINUS        reduce using rule 21 (expression -> expression OP_TIMES expression .)
    OP_TIMES        reduce using rule 21 (expression -> expression OP_TIMES expression .)
    OP_DIVIDE       reduce using rule 21 (expression -> expression OP_TIMES expression .)
    OP_GT           reduce using rule 21 (expression -> expression OP_TIMES expression .)
    COMMA           reduce using rule 21 (expression -> expression OP_TIMES expression .)
    RPAREN          reduce using rule 21 (expression -> expression OP_TIMES expression .)

  ! OP_PLUS         [ shift and go to state 35 ]
  ! OP_MINUS        [ shift and go to state 32 ]
  ! OP_TIMES        [ shift and go to state 33 ]
  ! OP_DIVIDE       [ shift and go to state 30 ]
  ! OP_GT           [ shift and go to state 34 ]


state 51

    (23) expression -> expression OP_GT expression .
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    SEMICOLON       reduce using rule 23 (expression -> expression OP_GT expression .)
    OP_GT           reduce using rule 23 (expression -> expression OP_GT expression .)
    COMMA           reduce using rule 23 (expression -> expression OP_GT expression .)
    RPAREN          reduce using rule 23 (expression -> expression OP_GT expression .)
    OP_PLUS         shift and go to state 35
    OP_MINUS        shift and go to state 32
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30

  ! OP_PLUS         [ reduce using rule 23 (expression -> expression OP_GT expression .) ]
  ! OP_MINUS        [ reduce using rule 23 (expression -> expression OP_GT expression .) ]
  ! OP_TIMES        [ reduce using rule 23 (expression -> expression OP_GT expression .) ]
  ! OP_DIVIDE       [ reduce using rule 23 (expression -> expression OP_GT expression .) ]
  ! OP_GT           [ shift and go to state 34 ]


state 52

    (19) expression -> expression OP_PLUS expression .
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    SEMICOLON       reduce using rule 19 (expression -> expression OP_PLUS expression .)
    OP_PLUS         reduce using rule 19 (expression -> expression OP_PLUS expression .)
    OP_MINUS        reduce using rule 19 (expression -> expression OP_PLUS expression .)
    OP_GT           reduce using rule 19 (expression -> expression OP_PLUS expression .)
    COMMA           reduce using rule 19 (expression -> expression OP_PLUS expression .)
    RPAREN          reduce using rule 19 (expression -> expression OP_PLUS expression .)
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30

  ! OP_TIMES        [ reduce using rule 19 (expression -> expression OP_PLUS expression .) ]
  ! OP_DIVIDE       [ reduce using rule 19 (expression -> expression OP_PLUS expression .) ]
  ! OP_PLUS         [ shift and go to state 35 ]
  ! OP_MINUS        [ shift and go to state 32 ]
  ! OP_GT           [ shift and go to state 34 ]


state 53

    (10) define_stmt -> VAR ID OP_EQUAL expression . SEMICOLON
    (19) expression -> expression . OP_PLUS expression
    (20) expression -> expression . OP_MINUS expression
    (21) expression -> expression . OP_TIMES expression
    (22) expression -> expression . OP_DIVIDE expression
    (23) expression -> expression . OP_GT expression

    SEMICOLON       shift and go to state 63
    OP_PLUS         shift and go to state 35
    OP_MINUS        shift and go to state 32
    OP_TIMES        shift and go to state 33
    OP_DIVIDE       shift and go to state 30
    OP_GT           shift and go to state 34


state 54

    (12) while_stmt -> WHILE LPAREN expression RPAREN . compound_statements
    (18) compound_statements -> . LBRACKET statements RBRACKET

    LBRACKET        shift and go to state 64

    compound_statements            shift and go to state 65

state 55

    (34) function_decl -> FUNCTION LPAREN parameters RPAREN . compound_statements
    (18) compound_statements -> . LBRACKET statements RBRACKET

    LBRACKET        shift and go to state 64

    compound_statements            shift and go to state 66

state 56

    (36) parameters_rest -> COMMA . parameter parameters_rest
    (38) parameter -> . ID

    ID              shift and go to state 41

    parameter                      shift and go to state 67

state 57

    (35) parameters -> parameter parameters_rest .

    RPAREN          reduce using rule 35 (parameters -> parameter parameters_rest .)


state 58

    (31) arguments_rest -> COMMA . argument arguments_rest
    (33) argument -> . expression
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    ID              shift and go to state 24
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    argument                       shift and go to state 68
    function_call                  shift and go to state 4
    expression                     shift and go to state 45

state 59

    (30) arguments -> argument arguments_rest .

    RPAREN          reduce using rule 30 (arguments -> argument arguments_rest .)


state 60

    (29) function_call -> ID LPAREN arguments RPAREN .

    RPAREN          reduce using rule 29 (function_call -> ID LPAREN arguments RPAREN .)
    OP_PLUS         reduce using rule 29 (function_call -> ID LPAREN arguments RPAREN .)
    OP_MINUS        reduce using rule 29 (function_call -> ID LPAREN arguments RPAREN .)
    OP_TIMES        reduce using rule 29 (function_call -> ID LPAREN arguments RPAREN .)
    OP_DIVIDE       reduce using rule 29 (function_call -> ID LPAREN arguments RPAREN .)
    OP_GT           reduce using rule 29 (function_call -> ID LPAREN arguments RPAREN .)
    SEMICOLON       reduce using rule 29 (function_call -> ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 29 (function_call -> ID LPAREN arguments RPAREN .)


state 61

    (11) assign_stmt -> ID OP_EQUAL expression SEMICOLON .

    RBRACKET        reduce using rule 11 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 11 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    VAR             reduce using rule 11 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    ID              reduce using rule 11 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 11 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 11 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 11 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    IF              reduce using rule 11 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 11 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)
    $end            reduce using rule 11 (assign_stmt -> ID OP_EQUAL expression SEMICOLON .)


state 62

    (15) if_stmt -> IF LPAREN expression RPAREN . compound_statements else_clause
    (18) compound_statements -> . LBRACKET statements RBRACKET

    LBRACKET        shift and go to state 64

    compound_statements            shift and go to state 69

state 63

    (10) define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .

    WHILE           reduce using rule 10 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    VAR             reduce using rule 10 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    ID              reduce using rule 10 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    NUMBER          reduce using rule 10 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 10 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 10 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    IF              reduce using rule 10 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 10 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    $end            reduce using rule 10 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)
    RBRACKET        reduce using rule 10 (define_stmt -> VAR ID OP_EQUAL expression SEMICOLON .)


state 64

    (18) compound_statements -> LBRACKET . statements RBRACKET
    (2) statements -> . statements statement
    (3) statements -> .

    RBRACKET        reduce using rule 3 (statements -> .)
    WHILE           reduce using rule 3 (statements -> .)
    VAR             reduce using rule 3 (statements -> .)
    ID              reduce using rule 3 (statements -> .)
    NUMBER          reduce using rule 3 (statements -> .)
    LPAREN          reduce using rule 3 (statements -> .)
    RETURN          reduce using rule 3 (statements -> .)
    IF              reduce using rule 3 (statements -> .)
    FUNCTION        reduce using rule 3 (statements -> .)

    statements                     shift and go to state 70

state 65

    (12) while_stmt -> WHILE LPAREN expression RPAREN compound_statements .

    WHILE           reduce using rule 12 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    VAR             reduce using rule 12 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    ID              reduce using rule 12 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    NUMBER          reduce using rule 12 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    LPAREN          reduce using rule 12 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    RETURN          reduce using rule 12 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    IF              reduce using rule 12 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    FUNCTION        reduce using rule 12 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    $end            reduce using rule 12 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)
    RBRACKET        reduce using rule 12 (while_stmt -> WHILE LPAREN expression RPAREN compound_statements .)


state 66

    (34) function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .

    OP_PLUS         reduce using rule 34 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    OP_MINUS        reduce using rule 34 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    OP_TIMES        reduce using rule 34 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    OP_DIVIDE       reduce using rule 34 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    OP_GT           reduce using rule 34 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    COMMA           reduce using rule 34 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    RPAREN          reduce using rule 34 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)
    SEMICOLON       reduce using rule 34 (function_decl -> FUNCTION LPAREN parameters RPAREN compound_statements .)


state 67

    (36) parameters_rest -> COMMA parameter . parameters_rest
    (36) parameters_rest -> . COMMA parameter parameters_rest
    (37) parameters_rest -> .

    COMMA           shift and go to state 56
    RPAREN          reduce using rule 37 (parameters_rest -> .)

    parameters_rest                shift and go to state 71

state 68

    (31) arguments_rest -> COMMA argument . arguments_rest
    (31) arguments_rest -> . COMMA argument arguments_rest
    (32) arguments_rest -> .

    COMMA           shift and go to state 58
    RPAREN          reduce using rule 32 (arguments_rest -> .)

    arguments_rest                 shift and go to state 72

state 69

    (15) if_stmt -> IF LPAREN expression RPAREN compound_statements . else_clause
    (16) else_clause -> .
    (17) else_clause -> . ELSE compound_statements

    WHILE           reduce using rule 16 (else_clause -> .)
    VAR             reduce using rule 16 (else_clause -> .)
    ID              reduce using rule 16 (else_clause -> .)
    NUMBER          reduce using rule 16 (else_clause -> .)
    LPAREN          reduce using rule 16 (else_clause -> .)
    RETURN          reduce using rule 16 (else_clause -> .)
    IF              reduce using rule 16 (else_clause -> .)
    FUNCTION        reduce using rule 16 (else_clause -> .)
    $end            reduce using rule 16 (else_clause -> .)
    RBRACKET        reduce using rule 16 (else_clause -> .)
    ELSE            shift and go to state 73

    else_clause                    shift and go to state 74

state 70

    (18) compound_statements -> LBRACKET statements . RBRACKET
    (2) statements -> statements . statement
    (4) statement -> . while_stmt
    (5) statement -> . define_stmt
    (6) statement -> . assign_stmt
    (7) statement -> . expression SEMICOLON
    (8) statement -> . return_stmt
    (9) statement -> . if_stmt
    (12) while_stmt -> . WHILE LPAREN expression RPAREN compound_statements
    (10) define_stmt -> . VAR ID OP_EQUAL expression SEMICOLON
    (11) assign_stmt -> . ID OP_EQUAL expression SEMICOLON
    (19) expression -> . expression OP_PLUS expression
    (20) expression -> . expression OP_MINUS expression
    (21) expression -> . expression OP_TIMES expression
    (22) expression -> . expression OP_DIVIDE expression
    (23) expression -> . expression OP_GT expression
    (24) expression -> . ID
    (25) expression -> . NUMBER
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . function_call
    (28) expression -> . function_decl
    (13) return_stmt -> . RETURN SEMICOLON
    (14) return_stmt -> . RETURN expression SEMICOLON
    (15) if_stmt -> . IF LPAREN expression RPAREN compound_statements else_clause
    (29) function_call -> . ID LPAREN arguments RPAREN
    (34) function_decl -> . FUNCTION LPAREN parameters RPAREN compound_statements

    RBRACKET        shift and go to state 75
    WHILE           shift and go to state 6
    VAR             shift and go to state 5
    ID              shift and go to state 14
    NUMBER          shift and go to state 3
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 8
    IF              shift and go to state 15
    FUNCTION        shift and go to state 12

    function_decl                  shift and go to state 16
    if_stmt                        shift and go to state 17
    define_stmt                    shift and go to state 9
    function_call                  shift and go to state 4
    assign_stmt                    shift and go to state 10
    while_stmt                     shift and go to state 18
    return_stmt                    shift and go to state 7
    statement                      shift and go to state 11
    expression                     shift and go to state 19

state 71

    (36) parameters_rest -> COMMA parameter parameters_rest .

    RPAREN          reduce using rule 36 (parameters_rest -> COMMA parameter parameters_rest .)


state 72

    (31) arguments_rest -> COMMA argument arguments_rest .

    RPAREN          reduce using rule 31 (arguments_rest -> COMMA argument arguments_rest .)


state 73

    (17) else_clause -> ELSE . compound_statements
    (18) compound_statements -> . LBRACKET statements RBRACKET

    LBRACKET        shift and go to state 64

    compound_statements            shift and go to state 76

state 74

    (15) if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .

    WHILE           reduce using rule 15 (if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .)
    VAR             reduce using rule 15 (if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .)
    ID              reduce using rule 15 (if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .)
    NUMBER          reduce using rule 15 (if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .)
    LPAREN          reduce using rule 15 (if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .)
    RETURN          reduce using rule 15 (if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .)
    IF              reduce using rule 15 (if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .)
    FUNCTION        reduce using rule 15 (if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .)
    $end            reduce using rule 15 (if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .)
    RBRACKET        reduce using rule 15 (if_stmt -> IF LPAREN expression RPAREN compound_statements else_clause .)


state 75

    (18) compound_statements -> LBRACKET statements RBRACKET .

    WHILE           reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    VAR             reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    ID              reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    NUMBER          reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    LPAREN          reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    RETURN          reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    IF              reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    FUNCTION        reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    $end            reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    RBRACKET        reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    SEMICOLON       reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    OP_PLUS         reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    OP_MINUS        reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    OP_TIMES        reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    OP_DIVIDE       reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    OP_GT           reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    RPAREN          reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    COMMA           reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)
    ELSE            reduce using rule 18 (compound_statements -> LBRACKET statements RBRACKET .)


state 76

    (17) else_clause -> ELSE compound_statements .

    WHILE           reduce using rule 17 (else_clause -> ELSE compound_statements .)
    VAR             reduce using rule 17 (else_clause -> ELSE compound_statements .)
    ID              reduce using rule 17 (else_clause -> ELSE compound_statements .)
    NUMBER          reduce using rule 17 (else_clause -> ELSE compound_statements .)
    LPAREN          reduce using rule 17 (else_clause -> ELSE compound_statements .)
    RETURN          reduce using rule 17 (else_clause -> ELSE compound_statements .)
    IF              reduce using rule 17 (else_clause -> ELSE compound_statements .)
    FUNCTION        reduce using rule 17 (else_clause -> ELSE compound_statements .)
    $end            reduce using rule 17 (else_clause -> ELSE compound_statements .)
    RBRACKET        reduce using rule 17 (else_clause -> ELSE compound_statements .)

